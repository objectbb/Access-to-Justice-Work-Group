(function() {
    angular.module('taxidriver').service('da', ['breeze',
        function(breeze) {
            var dm, addType, DATE, DT, helper, ID, STRING;
            var emFactory = function(breeze) {
                // Convert properties between server-side PascalCase and client-side camelCase
                // breeze.NamingConvention.camelCase.setAsDefault();
                // Identify the endpoint for the remote data service
                //var serviceRoot = window.location.protocol + '//' + window.location.host + '/';
                var serviceName = "nothing"; // breeze Web API controller
                // the "factory" services exposes two members
                var manager = new breeze.EntityManager(serviceName);

                options = new breeze.QueryOptions({
                    fetchStrategy: breeze.FetchStrategy.FromLocalCache
                });
                manager.setProperties({
                    queryOptions: options
                });
                // get the MetadataStore from the manager and fill it
                var store = manager.metadataStore;
                //metadataFactory.fillMetadataStore(store);
                //var store = metadataStore; // the metadataStore that we'll be filling
                // namespace of the corresponding classes on the server
                var namespace = 'Model'; // don't really need it here 
                // 'Identity' is the default key generation strategy for this app
                var keyGen = breeze.AutoGeneratedKeyType.Identity;
                // Breeze Labs: breeze.metadata-helper.js
                // https://github.com/Breeze/breeze.js.labs/blob/master/breeze.metadata-helper.js
                // The helper reduces data entry by applying common conventions
                // and converting common abbreviations (e.g., 'type' -> 'dataType')
                helper = new breeze.config.MetadataHelper(namespace, keyGen);
                helper.addDataService(store, serviceName);
                // addType - make it easy to add the type to the store using the helper
                addType = function(type) {
                    return helper.addTypeToStore(store, type);
                };
                // DataTypes we'll be using
                DT = breeze.DataType;
                DATE = DT.DateTime;
                ID = DT.Int32;
                STRING = DT.String;
                return manager;
            }
            dm = emFactory(breeze);
            return {
                execute: function(query) {
                  
                    dm.executeQuery(query).then(function(data) {
                        console.log(data.results.length + " rows stored");
                        return   data.results;
                    }).catch(function(e) {
                        alert(e);
                    })
                },
                loadtable: function(name, data) {
                    for (var i = 0; i < data.length; i++) dm.createEntity(name, data[i]);
                },
                clearalltables: function() {
                                    _.map(dm.getEntities(), function(item){ item.entityAspect.setDeleted()})
                                },
                createtable: function(item, cols) {
                    var objectcols = {
                        id: {
                            type: ID
                        }
                    };
                    for (var i = 0; i < cols.length; ++i) objectcols[cols[i].name] = {
                        type: (cols[i].type == "NUMBER") ? ID : (cols[i].type == "DATETIME") ? DATE : STRING
                    };
                    addType({
                        name: item.name,
                        dataProperties: objectcols,
                        navigationProperties: item.navigationProperties
                    });
                }
            }
        }
    ]);
})();